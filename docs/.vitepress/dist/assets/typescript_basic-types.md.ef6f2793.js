import{_ as s,o as n,c as a,V as l}from"./chunks/framework.b09b2e74.js";const B=JSON.parse('{"title":"基础类型","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/basic-types.md","lastUpdated":1682053110000}'),p={name:"typescript/basic-types.md"},o=l(`<h1 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-label="Permalink to &quot;基础类型&quot;">​</a></h1><h2 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean&quot;">​</a></h2><p>最基本的数据类型就是简单的 true/false 值，在 JavaScript 和 TypeScript 里叫做 boolean。</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">isDone</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">boolean</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#4D9375;">false</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">isDone</span><span style="color:#999999;">: </span><span style="color:#2E808F;">boolean</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#1E754F;">false</span><span style="color:#999999;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number&quot;">​</a></h2><p>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数或者大整数。这些浮点数的类型是 number， 而大整数的类型则是 bigint。除了支持十进制和十六进制字面量，TypeScript 还支持 ECMAScript 2015 中引入的二进制和八进制字面量。</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">decLiteral</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">number</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#4C9A91;">6</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">hexLiteral</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">number</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#4C9A91;">0xf00d</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">binaryLiteral</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">number</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#4C9A91;">0b1010</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">octalLiteral</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">number</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#4C9A91;">0o744</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">bigLiteral</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">bigint</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#4C9A91;">100</span><span style="color:#CB7676;">n</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">decLiteral</span><span style="color:#999999;">: </span><span style="color:#2E808F;">number</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#2F798A;">6</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">hexLiteral</span><span style="color:#999999;">: </span><span style="color:#2E808F;">number</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#2F798A;">0xf00d</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">binaryLiteral</span><span style="color:#999999;">: </span><span style="color:#2E808F;">number</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#2F798A;">0b1010</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">octalLiteral</span><span style="color:#999999;">: </span><span style="color:#2E808F;">number</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#2F798A;">0o744</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">bigLiteral</span><span style="color:#999999;">: </span><span style="color:#2E808F;">bigint</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#2F798A;">100</span><span style="color:#AB5959;">n</span><span style="color:#999999;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h2><p>JavaScript 程序的另一项基本操作是处理网页或服务器端的文本数据。像其它语言里一样，我们使用 string 表示文本数据类型。和 JavaScript 一样，可以使用双引号（&quot;）或单引号（&#39;）表示字符串。</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">name</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">string</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">bob</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#BD976A;">name</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">smith</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">name</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">bob</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">smith</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>你还可以使用<strong>模版字符串</strong>，它可以定义多行文本和内嵌表达式。这种字符串是被反引号包围 （\`\`），并且以 \${ expr } 这种形式嵌入表达式</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">name</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">string</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#C98A7D99;">\`</span><span style="color:#C98A7D;">Gene</span><span style="color:#C98A7D99;">\`</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">age</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">number</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#4C9A91;">37</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">sentence</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">string</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#C98A7D99;">\`</span><span style="color:#C98A7D;">Hello, my name is </span><span style="color:#666666;">\${</span><span style="color:#C98A7D;">name</span><span style="color:#666666;">}</span><span style="color:#C98A7D;">.I&#39;ll be </span><span style="color:#666666;">\${</span><span style="color:#C98A7D;">age </span><span style="color:#CB7676;">+</span><span style="color:#C98A7D;"> </span><span style="color:#4C9A91;">1</span><span style="color:#666666;">}</span><span style="color:#C98A7D;"> years old next month.</span><span style="color:#C98A7D99;">\`</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">name</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#B5695999;">\`</span><span style="color:#B56959;">Gene</span><span style="color:#B5695999;">\`</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">age</span><span style="color:#999999;">: </span><span style="color:#2E808F;">number</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#2F798A;">37</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">sentence</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#B5695999;">\`</span><span style="color:#B56959;">Hello, my name is </span><span style="color:#999999;">\${</span><span style="color:#B56959;">name</span><span style="color:#999999;">}</span><span style="color:#B56959;">.I&#39;ll be </span><span style="color:#999999;">\${</span><span style="color:#B56959;">age </span><span style="color:#AB5959;">+</span><span style="color:#B56959;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">}</span><span style="color:#B56959;"> years old next month.</span><span style="color:#B5695999;">\`</span><span style="color:#999999;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这与下面定义 sentence 的方式效果相同：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">sentence</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">string</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">Hello, my name is </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#CB7676;"> + </span><span style="color:#BD976A;">name</span><span style="color:#CB7676;"> + </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">.</span><span style="color:#C99076;">\\n\\n</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#CB7676;"> + </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">I&#39;ll be </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#CB7676;"> + </span><span style="color:#666666;">(</span><span style="color:#BD976A;">age</span><span style="color:#CB7676;"> + </span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)</span><span style="color:#CB7676;"> + </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;"> years old next month.</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">sentence</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">Hello, my name is </span><span style="color:#B5695999;">&quot;</span><span style="color:#AB5959;"> + </span><span style="color:#B07D48;">name</span><span style="color:#AB5959;"> + </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">.</span><span style="color:#A65E2B;">\\n\\n</span><span style="color:#B5695999;">&quot;</span><span style="color:#AB5959;"> + </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">I&#39;ll be </span><span style="color:#B5695999;">&quot;</span><span style="color:#AB5959;"> + </span><span style="color:#999999;">(</span><span style="color:#B07D48;">age</span><span style="color:#AB5959;"> + </span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> + </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;"> years old next month.</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h2><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">s</span><span style="color:#CB7676;"> = </span><span style="color:#80A665;">Symbol</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#CB7676;">typeof</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">s</span><span style="color:#666666;">);</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// &quot;symbol&quot;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">s</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">Symbol</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">s</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &quot;symbol&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h2><p>TypeScript 像 JavaScript 一样可以操作数组元素。有两种方式可以定义数组。第一种，可以在元素类型后面接上[]，表示由此类型元素组成的一个数组：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">list</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">number</span><span style="color:#666666;">[] </span><span style="color:#CB7676;">= </span><span style="color:#666666;">[</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">2</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">3</span><span style="color:#666666;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">list</span><span style="color:#999999;">: </span><span style="color:#2E808F;">number</span><span style="color:#999999;">[] </span><span style="color:#AB5959;">= </span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">3</span><span style="color:#999999;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>第二种方式是使用数组泛型，Array&lt;元素类型&gt;：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">list</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">Array</span><span style="color:#666666;">&lt;</span><span style="color:#5DA9A7;">number</span><span style="color:#666666;">&gt; </span><span style="color:#CB7676;">= </span><span style="color:#666666;">[</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">2</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">3</span><span style="color:#666666;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">list</span><span style="color:#999999;">: </span><span style="color:#2E808F;">Array</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">number</span><span style="color:#999999;">&gt; </span><span style="color:#AB5959;">= </span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">3</span><span style="color:#999999;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="tuple" tabindex="-1">Tuple <a class="header-anchor" href="#tuple" aria-label="Permalink to &quot;Tuple&quot;">​</a></h2><blockquote><p><a href="/typescript/tuple">元组</a>类型是一种另类的数组类型，它确切地知道它包含多少个元素，以及它在特定位置元素的类型。</p></blockquote><p>比如，你可以定义一对值分别为 string 和 number 类型的元组。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-DbDXO" id="tab-tkhqRM4" checked="checked"><label for="tab-tkhqRM4">TypeScript</label><input type="radio" name="group-DbDXO" id="tab-8yrJUf3"><label for="tab-8yrJUf3">Javascript</label></div><div class="blocks"><div class="language-TypeScript active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">x</span><span style="color:#666666;">: [</span><span style="color:#5DA9A7;">string</span><span style="color:#666666;">, </span><span style="color:#5DA9A7;">number</span><span style="color:#666666;">] </span><span style="color:#CB7676;">=  </span><span style="color:#666666;">[</span><span style="color:#CB7676;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">hello</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">0</span><span style="color:#CB7676;"> </span><span style="color:#666666;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">x</span><span style="color:#999999;">: [</span><span style="color:#2E808F;">string</span><span style="color:#999999;">, </span><span style="color:#2E808F;">number</span><span style="color:#999999;">] </span><span style="color:#AB5959;">=  </span><span style="color:#999999;">[</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">hello</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">0</span><span style="color:#AB5959;"> </span><span style="color:#999999;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-Javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Javascript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">use strict</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#CB7676;">let</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">x</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">hello</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">0</span><span style="color:#666666;">];</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 由此可以看出元组本质上（或者说编译后）是一个特殊数组。</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">use strict</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">x</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">hello</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">];</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 由此可以看出元组本质上（或者说编译后）是一个特殊数组。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div></div><h2 id="enum" tabindex="-1">Enum <a class="header-anchor" href="#enum" aria-label="Permalink to &quot;Enum&quot;">​</a></h2><blockquote><p><a href="/typescript/enum">Enum</a> 类型是对 JavaScript 标准数据类型的一个补充。使用枚举类型可以为一组数值赋予友好的名字。可以简单的理解为一组具有名字的常量集合。</p></blockquote><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">enum</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA9A7;">Color</span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Green</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Red</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Blue</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">enum</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">Color</span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Green</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Red</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Blue</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="unknown" tabindex="-1">Unknown <a class="header-anchor" href="#unknown" aria-label="Permalink to &quot;Unknown&quot;">​</a></h2><p>当我们在写应用的时候可能会需要描述一个我们还不知道其类型的变量。这些值可以来自动态内容，例如从用户获得，或者我们想在我们的 API 中接收所有可能类型的值。在这些情况下，我们想要让编译器以及未来的用户知道这个变量可以是任意类型。这个时候我们会对它使用 unknown 类型。</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">notSure</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">unknown</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#4C9A91;">4</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#BD976A;">notSure</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">maybe a string instead</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#758575DD;">// OK, definitely a boolean</span></span>
<span class="line"><span style="color:#BD976A;">notSure</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">false</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">notSure</span><span style="color:#999999;">: </span><span style="color:#2E808F;">unknown</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#2F798A;">4</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">notSure</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">maybe a string instead</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#A0ADA0;">// OK, definitely a boolean</span></span>
<span class="line"><span style="color:#B07D48;">notSure</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果你有一个 unknwon 类型的变量，你可以通过进行 typeof 、比较或者更高级的类型检查来将其的类型范围缩小：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">declare const </span><span style="color:#BD976A;">maybe</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">unknown</span><span style="color:#666666;">;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// &#39;maybe&#39; could be a string, object, boolean, undefined, or other types</span></span>
<span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">aNumber</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">number</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#BD976A;">maybe</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#4D9375;">if</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">maybe</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// TypeScript knows that maybe is a boolean now</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">aBoolean</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">boolean</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#BD976A;">maybe</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// So, it cannot be a string</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">aString</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">string</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#BD976A;">maybe</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#4D9375;">if</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#CB7676;">typeof</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">maybe</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">string</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// TypeScript knows that maybe is a string</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">aString</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">string</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#BD976A;">maybe</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// So, it cannot be a boolean</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">aBoolean</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">boolean</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#BD976A;">maybe</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">declare const </span><span style="color:#B07D48;">maybe</span><span style="color:#999999;">: </span><span style="color:#2E808F;">unknown</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &#39;maybe&#39; could be a string, object, boolean, undefined, or other types</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">aNumber</span><span style="color:#999999;">: </span><span style="color:#2E808F;">number</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#B07D48;">maybe</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">maybe</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// TypeScript knows that maybe is a boolean now</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">aBoolean</span><span style="color:#999999;">: </span><span style="color:#2E808F;">boolean</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#B07D48;">maybe</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// So, it cannot be a string</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">aString</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#B07D48;">maybe</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">maybe</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">string</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// TypeScript knows that maybe is a string</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">aString</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#B07D48;">maybe</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// So, it cannot be a boolean</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">aBoolean</span><span style="color:#999999;">: </span><span style="color:#2E808F;">boolean</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#B07D48;">maybe</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="any" tabindex="-1">Any <a class="header-anchor" href="#any" aria-label="Permalink to &quot;Any&quot;">​</a></h2><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用 any 类型来标记这些变量：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">notSure</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">any</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#4C9A91;">4</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#BD976A;">notSure</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">maybe a string instead</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#BD976A;">notSure</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">false</span><span style="color:#666666;">;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// okay, definitely a boolean</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">notSure</span><span style="color:#999999;">: </span><span style="color:#2E808F;">any</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#2F798A;">4</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">notSure</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">maybe a string instead</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">notSure</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// okay, definitely a boolean</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在对现有代码进行改写的时候，any 类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。你可能认为 Object 有相似的作用，就像它在其它语言中那样。但是 Object 类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">notSure</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">any</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#4C9A91;">4</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#BD976A;">notSure</span><span style="color:#666666;">.</span><span style="color:#80A665;">ifItExists</span><span style="color:#666666;">();</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// okay, ifItExists might exist at runtime</span></span>
<span class="line"><span style="color:#BD976A;">notSure</span><span style="color:#666666;">.</span><span style="color:#80A665;">toFixed</span><span style="color:#666666;">();</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// okay, toFixed exists (but the compiler doesn&#39;t check)</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">prettySure</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">Object</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#4C9A91;">4</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#BD976A;">prettySure</span><span style="color:#666666;">.</span><span style="color:#80A665;">toFixed</span><span style="color:#666666;">();</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// Error: Property &#39;toFixed&#39; doesn&#39;t exist on type &#39;Object&#39;.</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">notSure</span><span style="color:#999999;">: </span><span style="color:#2E808F;">any</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#2F798A;">4</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">notSure</span><span style="color:#999999;">.</span><span style="color:#59873A;">ifItExists</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// okay, ifItExists might exist at runtime</span></span>
<span class="line"><span style="color:#B07D48;">notSure</span><span style="color:#999999;">.</span><span style="color:#59873A;">toFixed</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// okay, toFixed exists (but the compiler doesn&#39;t check)</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">prettySure</span><span style="color:#999999;">: </span><span style="color:#2E808F;">Object</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#2F798A;">4</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">prettySure</span><span style="color:#999999;">.</span><span style="color:#59873A;">toFixed</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// Error: Property &#39;toFixed&#39; doesn&#39;t exist on type &#39;Object&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>应避免使用 Object，而是使用非原始 object 类型，正如 Do&#39;s and Don&#39;ts 里所讲的那样。</p></div><p>当你只知道一部分数据的类型时，any 类型也是有用的。比如，你有一个数组，它包含了不同的类型的数据：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">list</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">any</span><span style="color:#666666;">[] </span><span style="color:#CB7676;">= </span><span style="color:#666666;">[</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">free</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">list</span><span style="color:#666666;">[</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">]</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">list</span><span style="color:#999999;">: </span><span style="color:#2E808F;">any</span><span style="color:#999999;">[] </span><span style="color:#AB5959;">= </span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">free</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">list</span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span><span style="color:#999999;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="null-和-undefined" tabindex="-1">Null 和 Undefined <a class="header-anchor" href="#null-和-undefined" aria-label="Permalink to &quot;Null 和 Undefined&quot;">​</a></h2><p>TypeScript 里，undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null。 和 void 相似，它们的本身的类型用处不是很大：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// Not much else we can assign to these variables!</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">u</span><span style="color:#666666;">: </span><span style="color:#CB7676;">undefined</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= undefined</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">n</span><span style="color:#666666;">: </span><span style="color:#CB7676;">null</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= null</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// Not much else we can assign to these variables!</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">u</span><span style="color:#999999;">: </span><span style="color:#AB5959;">undefined</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= undefined</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">n</span><span style="color:#999999;">: </span><span style="color:#AB5959;">null</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= null</span><span style="color:#999999;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给 number 类型的变量。</p><p>然而，当你指定了--strictNullChecks 标记，null 和 undefined 只能赋值给 any 和它们各自的类型（有一个例外是 undefined 还可以赋值给 void 类型）。这能避免<strong>很多</strong>常见的问题。也许在某处你想传入一个 string 或 null 或 undefined，你可以使用联合类型 string | null | undefined。</p><p>联合类型是高级主题，我们会在以后的章节里讨论它。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>我们鼓励尽可能地使用--strictNullChecks，但在本手册里我们假设这个标记是关闭的。</p></div><h2 id="void" tabindex="-1">Void <a class="header-anchor" href="#void" aria-label="Permalink to &quot;Void&quot;">​</a></h2><blockquote><p>一个未定义的子类型，旨在作为返回类型使用。</p></blockquote><p>当一个函数没有返回值时（返回的值是 undefined），你通常会见到其返回值类型是 void：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">warnUser</span><span style="color:#666666;">():</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA9A7;">void</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">This is my warning message</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">warnUser</span><span style="color:#999999;">():</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">void</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">This is my warning message</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>声明一个 void 类型的变量没有什么大用，因为你只能为它赋予 null（只在--strictNullChecks 未指定时）和 undefined：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">unusable</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">void</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= undefined</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">unusable</span><span style="color:#999999;">: </span><span style="color:#2E808F;">void</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= undefined</span><span style="color:#999999;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="never" tabindex="-1">Never <a class="header-anchor" href="#never" aria-label="Permalink to &quot;Never&quot;">​</a></h2><p>never 类型表示的是那些永不存在的值的类型。例如，never 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型；变量也可能是 never 类型，当它们被永不为真的类型保护所约束时。</p><p>never 类型是任何类型的子类型，也可以赋值给任何类型；然而，<strong>没有</strong>类型是 never 的子类型或可以赋值给 never 类型（除了 never 本身之外）。即使 any 也不可以赋值给 never。</p><p>下面是一些返回 never 类型的函数：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// 返回 never 的函数必须存在无法达到的终点</span></span>
<span class="line"><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">error</span><span style="color:#666666;">(</span><span style="color:#BD976A;">message</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">string</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA9A7;">never</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">throw</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">Error</span><span style="color:#666666;">(</span><span style="color:#BD976A;">message</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// 推断的返回值类型为 never</span></span>
<span class="line"><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">fail</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">error</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">Something failed</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// 返回 never 的函数必须存在无法达到的终点</span></span>
<span class="line"><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">infiniteLoop</span><span style="color:#666666;">():</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA9A7;">never</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">while</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#4D9375;">true</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 返回 never 的函数必须存在无法达到的终点</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">error</span><span style="color:#999999;">(</span><span style="color:#B07D48;">message</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">never</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">throw</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Error</span><span style="color:#999999;">(</span><span style="color:#B07D48;">message</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 推断的返回值类型为 never</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">fail</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#59873A;">error</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">Something failed</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 返回 never 的函数必须存在无法达到的终点</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">infiniteLoop</span><span style="color:#999999;">():</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">never</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">while</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#1E754F;">true</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>🔗 <a href="https://cloud.tencent.com/developer/article/1594872" target="_blank" rel="noreferrer">TypeScript never 类型</a><br></p><p>🔗 <a href="https://jkchao.github.io/TypeScript-book-chinese/typings/neverType.html" target="_blank" rel="noreferrer">Never 类型</a></p><h2 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h2><p>object 表示非原始类型，也就是除 number，string，boolean，bigint，symbol，null 或 undefined 之外的类型。</p><p>使用 object 类型，就可以更好的表示像 Object.create 这样的 API。例如：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">declare</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">create</span><span style="color:#666666;">(</span><span style="color:#BD976A;">o</span><span style="color:#666666;">: </span><span style="color:#CB7676;">object</span><span style="color:#666666;"> | </span><span style="color:#CB7676;">null</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA9A7;">void</span><span style="color:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">create</span><span style="color:#666666;">({</span><span style="color:#B8A965;">prop</span><span style="color:#666666;">: </span><span style="color:#4C9A91;">0</span><span style="color:#666666;">});</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// OK</span></span>
<span class="line"><span style="color:#80A665;">create</span><span style="color:#666666;">(</span><span style="color:#CB7676;">null</span><span style="color:#666666;">);</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// OK</span></span>
<span class="line"><span style="color:#80A665;">create</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">42</span><span style="color:#666666;">);</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// Error</span></span>
<span class="line"><span style="color:#80A665;">create</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">string</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">);</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// Error</span></span>
<span class="line"><span style="color:#80A665;">create</span><span style="color:#666666;">(</span><span style="color:#4D9375;">false</span><span style="color:#666666;">);</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// Error</span></span>
<span class="line"><span style="color:#80A665;">create</span><span style="color:#666666;">(</span><span style="color:#CB7676;">undefined</span><span style="color:#666666;">);</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// Error</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">create</span><span style="color:#999999;">(</span><span style="color:#B07D48;">o</span><span style="color:#999999;">: </span><span style="color:#AB5959;">object</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">null</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">void</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">create</span><span style="color:#999999;">({</span><span style="color:#998418;">prop</span><span style="color:#999999;">: </span><span style="color:#2F798A;">0</span><span style="color:#999999;">});</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// OK</span></span>
<span class="line"><span style="color:#59873A;">create</span><span style="color:#999999;">(</span><span style="color:#AB5959;">null</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// OK</span></span>
<span class="line"><span style="color:#59873A;">create</span><span style="color:#999999;">(</span><span style="color:#2F798A;">42</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// Error</span></span>
<span class="line"><span style="color:#59873A;">create</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">string</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// Error</span></span>
<span class="line"><span style="color:#59873A;">create</span><span style="color:#999999;">(</span><span style="color:#1E754F;">false</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// Error</span></span>
<span class="line"><span style="color:#59873A;">create</span><span style="color:#999999;">(</span><span style="color:#AB5959;">undefined</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="类型断言" tabindex="-1">类型断言 <a class="header-anchor" href="#类型断言" aria-label="Permalink to &quot;类型断言&quot;">​</a></h2><p>有时候你会遇到这样的情况，你会比 TypeScript 更了解某个值的详细信息。通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p><p>通过<em>类型断言</em>这种方式可以告诉编译器，“相信我，我知道自己在干什么”。类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。TypeScript 会假设你，程序员，已经进行了必须的检查。</p><p>类型断言有两种形式。其一是“尖括号”语法：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">someValue</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">any</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">this is a string</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">strLength</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">number</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#666666;">(&lt;</span><span style="color:#5DA9A7;">string</span><span style="color:#666666;">&gt;</span><span style="color:#BD976A;">someValue</span><span style="color:#666666;">).</span><span style="color:#B8A965;">length</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#BD976A;">另一个为</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">as</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA9A7;">语法</span><span style="color:#DBD7CAEE;">：</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">someValue</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">any</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">this is a string</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">strLength</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">number</span><span style="color:#666666;"> </span><span style="color:#CB7676;">= </span><span style="color:#666666;">(</span><span style="color:#BD976A;">someValue</span><span style="color:#CB7676;"> </span><span style="color:#4D9375;">as</span><span style="color:#CB7676;"> </span><span style="color:#5DA9A7;">string</span><span style="color:#666666;">).</span><span style="color:#B8A965;">length</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">someValue</span><span style="color:#999999;">: </span><span style="color:#2E808F;">any</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">this is a string</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">strLength</span><span style="color:#999999;">: </span><span style="color:#2E808F;">number</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#999999;">(&lt;</span><span style="color:#2E808F;">string</span><span style="color:#999999;">&gt;</span><span style="color:#B07D48;">someValue</span><span style="color:#999999;">).</span><span style="color:#998418;">length</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">另一个为</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">as</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">语法</span><span style="color:#393A34;">：</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">someValue</span><span style="color:#999999;">: </span><span style="color:#2E808F;">any</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">this is a string</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">strLength</span><span style="color:#999999;">: </span><span style="color:#2E808F;">number</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#999999;">(</span><span style="color:#B07D48;">someValue</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">as</span><span style="color:#AB5959;"> </span><span style="color:#2E808F;">string</span><span style="color:#999999;">).</span><span style="color:#998418;">length</span><span style="color:#999999;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>两种形式是等价的。至于使用哪个大多数情况下是凭个人喜好；然而，当你在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的。</p><h2 id="关于-let" tabindex="-1">关于 let <a class="header-anchor" href="#关于-let" aria-label="Permalink to &quot;关于 let&quot;">​</a></h2><p>你可能已经注意到了，我们使用 let 关键字来代替大家所熟悉的 JavaScript 关键字 var。 let 是 ES2015 引入的关键字，它比 var 更加安全，因此被看做是声明变量的标准方式。 我们会在以后详细介绍它，很多常见的问题都可以通过使用 let 来解决，所以尽可能地使用 let 来代替 var 吧。</p><h2 id="关于-number-string-boolean-symbol-和-object" tabindex="-1">关于 Number, String, Boolean, Symbol 和 Object <a class="header-anchor" href="#关于-number-string-boolean-symbol-和-object" aria-label="Permalink to &quot;关于 Number, String, Boolean, Symbol 和 Object&quot;">​</a></h2><p>我们很容易会认为 Number、 String、 Boolean、Symbol 以及 Object 这些类型和我们以上推荐的小写版本的类型是一样的。但这些类型不属于语言的基本类型，并且几乎在任何时候都不应该被用作一个类型：</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// @errors: 2339</span></span>
<span class="line"><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">reverse</span><span style="color:#666666;">(</span><span style="color:#BD976A;">s</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">String</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA9A7;">String</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">s</span><span style="color:#666666;">.</span><span style="color:#80A665;">split</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;&quot;</span><span style="color:#666666;">).</span><span style="color:#80A665;">reverse</span><span style="color:#666666;">().</span><span style="color:#80A665;">join</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;&quot;</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">reverse</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">hello world</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">);</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// @errors: 2339</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reverse</span><span style="color:#999999;">(</span><span style="color:#B07D48;">s</span><span style="color:#999999;">: </span><span style="color:#2E808F;">String</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">String</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">s</span><span style="color:#999999;">.</span><span style="color:#59873A;">split</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;&quot;</span><span style="color:#999999;">).</span><span style="color:#59873A;">reverse</span><span style="color:#999999;">().</span><span style="color:#59873A;">join</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;&quot;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">reverse</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">hello world</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>相对地，我们应该使用 number、string、boolean、object 和 symbol</p><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">reverse</span><span style="color:#666666;">(</span><span style="color:#BD976A;">s</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">string</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA9A7;">string</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">s</span><span style="color:#666666;">.</span><span style="color:#80A665;">split</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;&quot;</span><span style="color:#666666;">).</span><span style="color:#80A665;">reverse</span><span style="color:#666666;">().</span><span style="color:#80A665;">join</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;&quot;</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">reverse</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">hello world</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">);</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reverse</span><span style="color:#999999;">(</span><span style="color:#B07D48;">s</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">string</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">s</span><span style="color:#999999;">.</span><span style="color:#59873A;">split</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;&quot;</span><span style="color:#999999;">).</span><span style="color:#59873A;">reverse</span><span style="color:#999999;">().</span><span style="color:#59873A;">join</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;&quot;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">reverse</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">hello world</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,78),e=[o];function r(t,c,y,i,A,d){return n(),a("div",null,e)}const D=s(p,[["render",r]]);export{B as __pageData,D as default};

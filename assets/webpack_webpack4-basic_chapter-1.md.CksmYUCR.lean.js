import{_ as e,c as a,o as t,a7 as o}from"./chunks/framework.BVPdqVqB.js";const k=JSON.parse('{"title":"第 1 章 Webpack 简介","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/webpack4-basic/chapter-1.md","filePath":"webpack/webpack4-basic/chapter-1.md","lastUpdated":1724075374000}'),r={name:"webpack/webpack4-basic/chapter-1.md"},d=o('<h1 id="第-1-章-webpack-简介" tabindex="-1">第 1 章 Webpack 简介 <a class="header-anchor" href="#第-1-章-webpack-简介" aria-label="Permalink to &quot;第 1 章 Webpack 简介&quot;">​</a></h1><h2 id="_1-1-webpack-是什么" tabindex="-1">1.1 Webpack 是什么？ <a class="header-anchor" href="#_1-1-webpack-是什么" aria-label="Permalink to &quot;1.1 Webpack 是什么？&quot;">​</a></h2><blockquote><p>Webpack 是一种前端资源构建工具。一个静态模块打包器(module bundler)。在 Webpack 看来，前端所有资源文件(js、css、html、图片、字体等)都可以视为模块，这些模块会经过 loader 转换成浏览器可以识别的模块。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。</p></blockquote><h2 id="_1-2-webpack-五个核心概念" tabindex="-1">1.2 Webpack 五个核心概念 <a class="header-anchor" href="#_1-2-webpack-五个核心概念" aria-label="Permalink to &quot;1.2 Webpack 五个核心概念&quot;">​</a></h2><h3 id="_1-2-1-entry" tabindex="-1">1.2.1 entry <a class="header-anchor" href="#_1-2-1-entry" aria-label="Permalink to &quot;1.2.1 entry&quot;">​</a></h3><p>入口(entry)指示 Webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p><h3 id="_1-2-2-output" tabindex="-1">1.2.2 output <a class="header-anchor" href="#_1-2-2-output" aria-label="Permalink to &quot;1.2.2 output&quot;">​</a></h3><p>输出(output)指示 Webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p><h3 id="_1-2-3-loader" tabindex="-1">1.2.3 loader <a class="header-anchor" href="#_1-2-3-loader" aria-label="Permalink to &quot;1.2.3 loader&quot;">​</a></h3><p>loadder 让 Webpack 能够去处理哪些非 JavaScript 文件(Webpack 自身只能处理 JavaScript 和 Json 文件)。</p><h3 id="_1-2-4-plugins" tabindex="-1">1.2.4 plugins <a class="header-anchor" href="#_1-2-4-plugins" aria-label="Permalink to &quot;1.2.4 plugins&quot;">​</a></h3><p>插件(plugins)可以用于执行范围更广的任务。插件的范围包括：从打包优化和压缩，一直到重新定义环境中的变量等。</p><h3 id="_1-2-5-mode" tabindex="-1">1.2.5 mode <a class="header-anchor" href="#_1-2-5-mode" aria-label="Permalink to &quot;1.2.5 mode&quot;">​</a></h3><p>模式(mode)指示 Webpack 使用哪种模式进行构建，可以是 development 或 production。</p><table style="width:100%;"><thead><tr><th>选项</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>development</td><td>会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</td><td>能让代码本地调试运行的环境</td></tr><tr><td>production</td><td>会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin。</td><td>能让代码优化上线运行的环境</td></tr></tbody></table>',15),c=[d];function n(l,p,i,s,h,u){return t(),a("div",null,c)}const _=e(r,[["render",n]]);export{k as __pageData,_ as default};

import{c as o,m as t,a as e,J as a,w as r,ab as n,a7 as i,ac as p,o as s,ad as _,ae as h,af as d}from"./chunks/framework.BVPdqVqB.js";import{M as l}from"./chunks/MTag.1c3HeCmR.js";const c=t("h1",{id:"http-详解",tabindex:"-1"},[e("Http 详解 "),t("a",{class:"header-anchor",href:"#http-详解","aria-label":'Permalink to "Http 详解"'},"​")],-1),T=t("h2",{id:"认识-http",tabindex:"-1"},[e("认识 Http "),t("a",{class:"header-anchor",href:"#认识-http","aria-label":'Permalink to "认识 Http"'},"​")],-1),P=t("p",null,"超文本传输协议可以进行文字分割：超文本（Hypertext）、传输（Transfer）、协议（Protocol），它们之间的关系如下：",-1),b=t("p",null,[t("img",{src:n,alt:"超文本传输协议",loading:"lazy"})],-1),u=t("p",null,"按照范围的大小 协议 > 传输 > 超文本。下面就分别对这三个名次做一个解释。",-1),f=t("h3",{id:"什么是超文本",tabindex:"-1"},[e("什么是超文本 "),t("a",{class:"header-anchor",href:"#什么是超文本","aria-label":'Permalink to "什么是超文本"'},"​")],-1),m=t("h3",{id:"什么是传输",tabindex:"-1"},[e("什么是传输 "),t("a",{class:"header-anchor",href:"#什么是传输","aria-label":'Permalink to "什么是传输"'},"​")],-1),H=t("a",{href:"https://mp.weixin.qq.com/s?__biz=MzkwMDE1MzkwNQ==&mid=2247496041&idx=1&sn=f8fe490a755a4e373fa36c8114467493&source=41#wechat_redirect",target:"_blank",rel:"noreferrer"},"🔗 你说你懂互联网，那这些你知道么？",-1),x=i('<p>通常我们把传输数据包的一方称为请求方，把接到二进制数据包的一方称为应答方。请求方和应答方可以进行互换，请求方也可以作为应答方接受数据，应答方也可以作为请求方请求数据，它们之间的关系如下：</p><p><img src="'+_+'" alt="传输" loading="lazy"></p><p>如图所示，A 和 B 是两个不同的端系统，它们之间可以作为信息交换的载体存在，刚开始的时候是 A 作为请求方请求与 B 交换信息，B 作为响应的一方提供信息；随着时间的推移，B 也可以作为请求方请求 A 交换信息，那么 A 也可以作为响应方响应 B 请求的信息。</p><h3 id="什么是协议" tabindex="-1">什么是协议 <a class="header-anchor" href="#什么是协议" aria-label="Permalink to &quot;什么是协议&quot;">​</a></h3><p>协议：经过谈判、协商而制定的共同承认、共同遵守的文件。</p><p>那么网络协议是什么呢？</p><p>网络协议就是网络中(包括互联网)传递、管理信息的一些规范。如同人与人之间相互交流是需要遵循一定的规矩一样，计算机之间的相互通信需要共同遵守一定的规则，这些规则就称为网络协议。</p><p>没有网络协议的互联网是混乱的，就和人类社会一样，人不能想怎么样就怎么样，你的行为约束是受到法律的约束的；那么互联网中的端系统也不能自己想发什么发什么，也是需要受到通信协议约束的。</p><p>那么我们就可以总结一下，什么是 HTTP？可以用下面这个经典的总结回答一下： <strong>HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范</strong>。</p><h2 id="与-http-有关的组件" tabindex="-1">与 HTTP 有关的组件 <a class="header-anchor" href="#与-http-有关的组件" aria-label="Permalink to &quot;与 HTTP 有关的组件&quot;">​</a></h2><p>随着网络世界演进，HTTP 协议已经几乎成为不可替代的一种协议，在了解了 HTTP 的基本组成后，下面再来带你进一步认识一下 HTTP 协议。</p><h3 id="网络模型" tabindex="-1">网络模型 <a class="header-anchor" href="#网络模型" aria-label="Permalink to &quot;网络模型&quot;">​</a></h3><p>网络是一个复杂的系统，不仅包括大量的应用程序、端系统、通信链路、分组交换机等，还有各种各样的协议组成，那么现在我们就来聊一下网络中的协议层次。</p>',13),S=t("h4",{id:"应用层",tabindex:"-1"},[e("应用层 "),t("a",{class:"header-anchor",href:"#应用层","aria-label":'Permalink to "应用层"'},"​")],-1),k=t("h4",{id:"运输层",tabindex:"-1"},[e("运输层 "),t("a",{class:"header-anchor",href:"#运输层","aria-label":'Permalink to "运输层"'},"​")],-1),y=t("p",null,"TCP 向它的应用程序提供了面向连接的服务，它能够控制并确认报文是否到达，并提供了拥塞机制来控制网络传输，因此当网络拥塞时，会抑制其传输速率。",-1),w=t("p",null,"UDP 协议向它的应用程序提供了无连接服务。它不具备可靠性的特征，没有流量控制，也没有拥塞控制。",-1),I=t("h4",{id:"网络层",tabindex:"-1"},[e("网络层 "),t("a",{class:"header-anchor",href:"#网络层","aria-label":'Permalink to "网络层"'},"​")],-1),C=t("h4",{id:"链路层",tabindex:"-1"},[e("链路层 "),t("a",{class:"header-anchor",href:"#链路层","aria-label":'Permalink to "链路层"'},"​")],-1),W=t("h4",{id:"物理层",tabindex:"-1"},[e("物理层 "),t("a",{class:"header-anchor",href:"#物理层","aria-label":'Permalink to "物理层"'},"​")],-1),g=i('<p>五层网络协议的示意图如下</p><p><img src="'+h+'" alt="网络模型" loading="lazy"></p><div class="info custom-block"><p class="custom-block-title">拓展资料</p><p>🔗 <a href="https://blog.csdn.net/m0_37809146/article/details/104017921" target="_blank" rel="noreferrer">详解四层、五层、七层计算机网络模型</a></p><p>🔗 <a href="https://www.jianshu.com/p/bb363a41afcf" target="_blank" rel="noreferrer">网络模型：七层、五层、四层概念及功能分析</a></p></div><p>四层、五层、七层计算机网络模型区别</p><p><img src="'+d+'" alt="网络模型" loading="lazy"></p><h3 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器&quot;">​</a></h3>',6),A=i('<div class="info custom-block"><p class="custom-block-title">拓展资料</p><p>🔗 <a href="https://juejin.cn/post/6935232082482298911" target="_blank" rel="noreferrer">浏览器 1</a></p><p>🔗 <a href="https://juejin.cn/post/6844904045572800525#heading-12" target="_blank" rel="noreferrer">浏览器 2</a></p></div><h3 id="web-服务器" tabindex="-1">Web 服务器 <a class="header-anchor" href="#web-服务器" aria-label="Permalink to &quot;Web 服务器&quot;">​</a></h3>',2),N=t("h3",{id:"cdn",tabindex:"-1"},[e("CDN "),t("a",{class:"header-anchor",href:"#cdn","aria-label":'Permalink to "CDN"'},"​")],-1),D=i('<div class="info custom-block"><p class="custom-block-title">拓展资料</p><p>🔗 <a href="https://juejin.cn/post/7064952956201730062" target="_blank" rel="noreferrer">什么是内容分发网络</a></p></div><h3 id="waf" tabindex="-1">WAF <a class="header-anchor" href="#waf" aria-label="Permalink to &quot;WAF&quot;">​</a></h3>',2),L=i('<h3 id="webservice" tabindex="-1">WebService <a class="header-anchor" href="#webservice" aria-label="Permalink to &quot;WebService&quot;">​</a></h3><p>WebService 是一种 Web 应用程序，WebService 是一种跨编程语言和跨操作系统平台的远程调用技术。 Web Service 是一种由 W3C 定义的应用服务开发规范，使用 client-server 主从架构，通常使用 WSDL 定义服务接口，使用 HTTP 协议传输 XML 或 SOAP 消息，它是一个基于 Web（HTTP）的服务架构技术，既可以运行在内网，也可以在适当保护后运行在外网。</p><h3 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h3><p>HTML 称为超文本标记语言，是一种标识性的语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的 Internet 资源连接为一个逻辑整体。HTML 文本是由 HTML 命令组成的描述性文本，HTML 命令可以说明文字，图形、动画、声音、表格、链接等。</p><h3 id="web-页面构成" tabindex="-1">Web 页面构成 <a class="header-anchor" href="#web-页面构成" aria-label="Permalink to &quot;Web 页面构成&quot;">​</a></h3>',5),q=t("h2",{id:"与-http-有关的协议",tabindex:"-1"},[e("与 HTTP 有关的协议 "),t("a",{class:"header-anchor",href:"#与-http-有关的协议","aria-label":'Permalink to "与 HTTP 有关的协议"'},"​")],-1),v=t("p",null,"在互联网中，任何协议都不会单独的完成信息交换，HTTP 也一样。虽然 HTTP 属于应用层的协议，但是它仍然需要其他层次协议的配合完成信息的交换，那么在完成一次 HTTP 请求和响应的过程中，需要哪些协议呢？",-1),R=t("h3",{id:"tcp-ip",tabindex:"-1"},[e("TCP/IP "),t("a",{class:"header-anchor",href:"#tcp-ip","aria-label":'Permalink to "TCP/IP"'},"​")],-1),M=t("p",null,[t("img",{src:p,alt:"tcp/ip",loading:"lazy"})],-1),U=t("h3",{id:"dns",tabindex:"-1"},[e("DNS "),t("a",{class:"header-anchor",href:"#dns","aria-label":'Permalink to "DNS"'},"​")],-1),V=t("h3",{id:"uri-url",tabindex:"-1"},[e("URI/URL "),t("a",{class:"header-anchor",href:"#uri-url","aria-label":'Permalink to "URI/URL"'},"​")],-1),B=t("p",null,"我们上面提到，你可以通过输入 www.google.com 地址来访问谷歌的官网，那么这个地址有什么规定吗？我怎么输都可以？AAA.BBB.CCC 是不是也行？当然不是的，你输入的地址格式必须要满足 URI 的规范。",-1),j=t("p",null,"URI 的全称是（Uniform Resource Identifier），中文名称是统一资源标识符，使用它就能够唯一地标记互联网上资源。 URL 的全称是（Uniform Resource Locator），中文名称是统一资源定位符，也就是我们俗称的网址，它实际上是 URI 的一个子集。 URI 不仅包括 URL，还包括 URN（统一资源名称）。",-1),E=t("h3",{id:"https",tabindex:"-1"},[e("HTTPS "),t("a",{class:"header-anchor",href:"#https","aria-label":'Permalink to "HTTPS"'},"​")],-1),z=i('<h2 id="http-请求响应过程" tabindex="-1">HTTP 请求响应过程 <a class="header-anchor" href="#http-请求响应过程" aria-label="Permalink to &quot;HTTP 请求响应过程&quot;">​</a></h2><p>你是不是很好奇，当你在浏览器中输入网址后，到底发生了什么事情？你想要的内容是如何展现出来的？让我们通过一个例子来探讨一下，我们假设访问的 URL 地址为 <a href="http://www.xxx.com/index" target="_blank" rel="noreferrer">http://www.xxx.com/index</a> 当我们输入网址并点击回车时，浏览器内部会进行如下操作</p><p>DNS 服务器会首先进行域名的映射，找到访问 www.xxx.com 所在的地址，然后 HTTP 客户端进程在 80 端口发起一个到服务器 www.xxx.com 的 TCP 连接（80 端口是 HTTP 的默认端口）。在客户和服务器进程中都会有一个套接字与其相连。 HTTP 客户端通过它的套接字向服务器发送一个 HTTP 请求报文。该报文中包含了路径 /index 的资源。 HTTP 服务器通过它的套接字接受该报文，进行请求的解析工作，并从其存储器(RAM 或磁盘)中检索出对象 www.xxx.com/index 然后把检索出来的对象进行封装，封装到 HTTP 响应报文中，并通过套接字向客户进行发送。 HTTP 服务器随即通知 TCP 断开 TCP 连接，实际上是需要等到客户接受完响应报文后才会断开 TCP 连接。 HTTP 客户端接受完响应报文后，TCP 连接会关闭。HTTP 客户端从响应中提取出报文中是一个 HTML 响应文件，并检查该 HTML 文件，然后循环检查报文中其他内部对象。检查完成后，HTTP 客户端会把对应的资源通过显示器呈现给用户。</p><p>至此，键入网址再按下回车的全过程就结束了。上述过程描述的是一种简单的 🔗 <a href="/programming-knowledge/network/require">请求到响应全过程</a>，真实的请求-响应情况可能要比上面描述的过程复杂很多。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">参考资料</p><p>🔗 <a href="https://juejin.cn/post/6844904045572800525" target="_blank" rel="noreferrer">看完这篇 HTTP，跟面试官扯皮就没问题了</a></p><p>🔗 <a href="https://www.cnblogs.com/sunsky303/p/10647255.html" target="_blank" rel="noreferrer">深入浅出－网络七层模型</a></p></div>',6),K=JSON.parse('{"title":"Http 详解","description":"","frontmatter":{},"headers":[],"relativePath":"network/http.md","filePath":"network/http.md","lastUpdated":1724075374000}'),F={name:"network/http.md"},Y=Object.assign(F,{setup(J){return(O,G)=>(s(),o("div",null,[c,T,t("p",null,[e("HTTP 是一种"),a(l,{type:"tip"},{default:r(()=>[e("超文本传输协议")]),_:1}),e("(Hypertext Transfer Protocol)，那么什么是超文本传输协议？")]),P,b,u,f,t("p",null,[e("在互联网早期的时候，我们输入的信息只能保存在本地，无法和其他电脑进行交互。我们保存的信息通常都以文本即简单字符的形式存在，文本是一种能够被计算机解析的有意义的二进制数据包。而随着互联网的高速发展，两台电脑之间能够进行数据的传输后，人们不满足只能在两台电脑之间传输文字，还想要传输图片、音频、视频，甚至点击文字或图片能够进行超链接的跳转，那么文本的语义就被扩大了，这种语义扩大后的文本就被称为"),a(l,{type:"tip"},{default:r(()=>[e("超文本")]),_:1}),e("(Hypertext)。")]),m,t("p",null,[e("那么我们上面说到，两台计算机之间会形成互联关系进行通信，我们存储的超文本会被解析成为二进制数据包，由传输载体（例如同轴电缆，电话线，光缆）负责把二进制数据包由计算机终端传输到另一个终端的过程（对终端的详细解释可以参考 "),H,e("这篇文章）称为"),a(l,{type:"tip"},{default:r(()=>[e("传输")]),_:1}),e("(transfer)。")]),x,t("p",null,[e("为了给网络协议的设计提供一个结构，网络设计者以"),a(l,{type:"tip"},{default:r(()=>[e("分层")]),_:1}),e("(layer)的方式组织协议，每个协议属于层次模型之一。每一层都是向它的上一层提供"),a(l,{type:"tip"},{default:r(()=>[e("服务")]),_:1}),e("(service)，即所谓的"),a(l,{type:"tip"},{default:r(()=>[e("服务模型")]),_:1}),e("(service model)。每个分层中所有的协议称为"),a(l,{type:"tip"},{default:r(()=>[e("协议栈")]),_:1}),e("(protocol stack)。因特网的协议栈由五个部分组成：物理层、链路层、网络层、运输层和应用层。我们采用自上而下的方法研究其原理，也就是应用层 -> 物理层的方式。")]),S,t("p",null,[e("应用层是网络应用程序和网络协议存放的分层，因特网的应用层包括许多协议，例如我们学 web 离不开的 "),a(l,{type:"tip"},{default:r(()=>[e("HTTP")]),_:1}),e(" ，电子邮件传送协议 "),a(l,{type:"tip"},{default:r(()=>[e("SMTP")]),_:1}),e(" 、端系统文件上传协议 "),a(l,{type:"tip"},{default:r(()=>[e("FTP")]),_:1}),e(" 、还有为我们进行域名解析的 "),a(l,{type:"tip"},{default:r(()=>[e("DNS")]),_:1}),e(" 协议。应用层协议分布在多个端系统上，一个端系统应用程序与另外一个端系统应用程序交换信息分组，我们把位于应用层的信息分组称为 "),a(l,{type:"tip"},{default:r(()=>[e("报文")]),_:1}),e("(message)。")]),k,t("p",null,[e("因特网的运输层在应用程序断点之间传送应用程序报文，在这一层主要有两种传输协议 "),a(l,{type:"tip"},{default:r(()=>[e("TCP")]),_:1}),e(" 和 "),a(l,{type:"tip"},{default:r(()=>[e("UDP")]),_:1}),e(" ，利用这两者中的任何一个都能够传输报文，不过这两种协议有巨大的不同。")]),y,w,t("p",null,[e("我们把运输层的分组称为 "),a(l,{type:"tip"},{default:r(()=>[e("报文段")]),_:1}),e("(segment)")]),I,t("p",null,[e("因特网的网络层负责将称为 "),a(l,{type:"tip"},{default:r(()=>[e("数据报")]),_:1}),e(" (datagram) 的网络分层从一台主机移动到另一台主机。网络层一个非常重要的协议是 "),a(l,{type:"tip"},{default:r(()=>[e("IP")]),_:1}),e(" 协议，所有具有网络层的因特网组件都必须运行 IP 协议，IP 协议是一种网际协议，除了 IP 协议外，网络层还包括一些其他网际协议和路由选择协议，一般把网络层就称为 IP 层，由此可知 IP 协议的重要性。")]),C,t("p",null,[e("现在我们有应用程序通信的协议，有了给应用程序提供运输的协议，还有了用于约定发送位置的 IP 协议，那么如何才能真正的发送数据呢？为了将分组从一个节点（主机或路由器）运输到另一个节点，网络层必须依靠链路层提供服务。链路层的例子包括以太网、WiFi 和电缆接入的 "),a(l,{type:"tip"},{default:r(()=>[e("DOCSIS")]),_:1}),e(" 协议，因为数据从源目的地传送通常需要经过几条链路，一个数据包可能被沿途不同的链路层协议处理，我们把链路层的分组称为 "),a(l,{type:"tip"},{default:r(()=>[e("帧")]),_:1}),e("(frame)")]),W,t("p",null,[e("虽然链路层的作用是将帧从一个端系统运输到另一个端系统，而物理层的作用是将帧中的一个个 "),a(l,{type:"tip"},{default:r(()=>[e("比特")]),_:1}),e(" 从一个节点运输到另一个节点，物理层的协议仍然使用链路层协议，这些协议与实际的物理传输介质有关，例如，以太网有很多物理层协议：关于双绞铜线、关于同轴电缆、关于光纤等等。")]),g,t("p",null,[e("浏览器正式的名字叫做 "),a(l,{type:"tip"},{default:r(()=>[e("Web Browser")]),_:1}),e("，顾名思义，就是检索、查看互联网上网页资源的应用程序，名字里的 Web，实际上指的就是 "),a(l,{type:"tip"},{default:r(()=>[e("World Wide Web")]),_:1}),e("，也就是万维网。")]),A,t("p",null,[e("Web 服务器的正式名称叫做 "),a(l,{type:"tip"},{default:r(()=>[e("Web Server")]),_:1}),e("，Web 服务器一般指的是网站服务器，上面说到浏览器是 HTTP 请求的发起方，那么 Web 服务器就是 HTTP 请求的应答方，Web 服务器可以向浏览器等 Web 客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。目前最主流的三个 Web 服务器是 Apache、 Nginx 、IIS。")]),N,t("p",null,[e("CDN 的全称是 "),a(l,{type:"tip"},{default:r(()=>[e("Content Delivery Network")]),_:1}),e("，即内容分发网络，它应用了 HTTP 协议里的缓存和代理技术，代替源站响应客户端的请求。CDN 是构建在现有网络基础之上的网络，它依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有 "),a(l,{type:"tip"},{default:r(()=>[e("内容存储")]),_:1}),e(" 和 "),a(l,{type:"tip"},{default:r(()=>[e("分发技术")]),_:1}),e("。")]),D,t("p",null,[e("WAF 是一种 Web 应用程序防护系统（"),a(l,{type:"tip"},{default:r(()=>[e("Web Application Firewall")]),_:1}),e("，简称 WAF），它是一种通过执行一系列针对 HTTP / HTTPS 的 "),a(l,{type:"tip"},{default:r(()=>[e("安全策略")]),_:1}),e(" 来专门为 Web 应用提供保护的一款产品，它是应用层面的 "),a(l,{type:"tip"},{default:r(()=>[e("防火墙")]),_:1}),e("，专门检测 HTTP 流量，是防护 Web 应用的安全技术。 WAF 通常位于 Web 服务器之前，可以阻止如 SQL 注入、跨站脚本等攻击，目前应用较多的一个开源项目是 ModSecurity，它能够完全集成进 Apache 或 Nginx。")]),L,t("p",null,[e("Web 页面（"),a(l,{type:"tip"},{default:r(()=>[e("Web page")]),_:1}),e("）也叫做文档，是由一个个对象组成的。一个对象(Object) 只是一个文件，比如一个 HTML 文件、一个 JPEG 图形、一个 Java 小程序或一个视频片段，它们在网络中可以通过 URL 地址寻址。多数的 Web 页面含有一个 HTML 基本文件以及几个引用对象。举个例子，如果一个 Web 页面包含 HTML 文件和 5 个 JPEG 图形，那么这个 Web 页面就有 6 个对象：一个 HTML 文件和 5 个 JPEG 图形。HTML 基本文件通过 URL 地址引用页面中的其他对象。")]),q,v,R,t("p",null,[e("TCP/IP 协议你一定听过，TCP/IP 我们一般称之为 "),a(l,{type:"tip"},{default:r(()=>[e("协议簇")]),_:1}),e("，什么意思呢？就是 TCP/IP 协议簇中不仅仅只有 TCP 协议和 IP 协议，它是一系列网络通信协议的统称。而其中最核心的两个协议就是 TCP / IP 协议，其他的还有 UDP、ICMP、ARP 等等，共同构成了一个复杂但有层次的协议栈。 TCP 协议的全称是 Transmission Control Protocol 的缩写，意思是传输控制协议，HTTP 使用 TCP 作为通信协议，这是因为 TCP 是一种可靠的协议，而可靠能保证数据不丢失。 IP 协议的全称是 Internet Protocol 的缩写，它主要解决的是通信双方寻址的问题。IP 协议使用 IP 地址 来标识互联网上的每一台计算机，可以把 IP 地址想象成为你手机的电话号码，你要与他人通话必须先要知道他人的手机号码，计算机网络中信息交换必须先要知道对方的 IP 地址。")]),M,U,t("p",null,[e("你有没有想过为什么你可以通过键入网址就能够获取你想要的网站？我们上面说到，计算机网络中的每个端系统都有一个 IP 地址存在，而把 IP 地址转换为便于人类记忆的协议就是 DNS 协议。 DNS 的全称是域名系统"),a(l,{type:"tip"},{default:r(()=>[e("（Domain Name System，缩写：DNS）")]),_:1}),e("，它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。")]),V,B,j,E,t("p",null,[e("HTTP 一般是明文传输，很容易被攻击者窃取重要信息，鉴于此，HTTPS 应运而生。HTTPS 的全称为"),a(l,{type:"tip"},{default:r(()=>[e("（Hyper Text Transfer Protocol over SecureSocket Layer）")]),_:1}),e("，全称有点长，HTTPS 和 HTTP 有很大的不同在于 HTTPS 是以安全为目标的 HTTP 通道，在 HTTP 的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS 在 HTTP 的基础上增加了 SSL 层，也就是说 HTTPS = HTTP + SSL。")]),z]))}});export{K as __pageData,Y as default};
